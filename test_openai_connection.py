#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API
"""
import os
import asyncio
import sys
from dotenv import load_dotenv
import httpx

load_dotenv()

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")

async def test_openai_chat():
    """–¢–µ—Å—Ç Chat Completions API"""
    print("=" * 60)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI Chat API")
    print("=" * 60)
    
    if not OPENAI_API_KEY:
        print("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return False
    
    print(f"‚úÖ API Key –Ω–∞–π–¥–µ–Ω: {OPENAI_API_KEY[:10]}...{OPENAI_API_KEY[-4:]}")
    print(f"üìù –ú–æ–¥–µ–ª—å: {OPENAI_MODEL}")
    
    url = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": OPENAI_MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –°–∫–∞–∂–∏ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å."}
        ],
        "max_tokens": 100
    }
    
    try:
        print("\nüîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI...")
        async with httpx.AsyncClient(timeout=30.0) as client:
            resp = await client.post(url, headers=headers, json=data)
            
            if resp.status_code == 200:
                result = resp.json()
                response_text = result["choices"][0]["message"]["content"]
                
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                print(f"\nüí¨ –û—Ç–≤–µ—Ç GPT:\n{response_text}")
                print(f"\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:")
                print(f"   - –í—Ö–æ–¥–Ω—ã—Ö: {result['usage']['prompt_tokens']}")
                print(f"   - –í—ã—Ö–æ–¥–Ω—ã—Ö: {result['usage']['completion_tokens']}")
                print(f"   - –í—Å–µ–≥–æ: {result['usage']['total_tokens']}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {resp.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {resp.text}")
                
                if resp.status_code == 401:
                    print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞")
                elif resp.status_code == 429:
                    print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                    print("   –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å: https://platform.openai.com/account/billing")
                elif resp.status_code == 404:
                    print(f"\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ú–æ–¥–µ–ª—å '{OPENAI_MODEL}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
        return False

async def test_openai_models():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print("\n" + "=" * 60)
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    print("=" * 60)
    
    url = "https://api.openai.com/v1/models"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}"
    }
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            resp = await client.get(url, headers=headers)
            
            if resp.status_code == 200:
                result = resp.json()
                models = [m["id"] for m in result["data"] if "gpt" in m["id"]]
                
                print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
                print("\nü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ GPT –º–æ–¥–µ–ª–∏:")
                for model in sorted(models)[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"   - {model}")
                
                if len(models) > 10:
                    print(f"   ... –∏ –µ—â–µ {len(models) - 10} –º–æ–¥–µ–ª–µ–π")
                
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π: {resp.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_whisper_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Whisper API"""
    print("\n" + "=" * 60)
    print("üé§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Whisper API")
    print("=" * 60)
    
    print("‚úÖ Whisper API –¥–æ—Å—Ç—É–ø–µ–Ω —Å —Ç–µ–º –∂–µ –∫–ª—é—á–æ–º")
    print("üìù Endpoint: https://api.openai.com/v1/audio/transcriptions")
    print("üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: —Ä—É—Å—Å–∫–∏–π, –∫–∞–∑–∞—Ö—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –¥—Ä.")
    print("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: $0.006 / –º–∏–Ω—É—Ç–∞ –∞—É–¥–∏–æ")
    print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ")
    print("   –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –≤ WhatsApp")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 60)
    
    # –¢–µ—Å—Ç Chat API
    chat_ok = await test_openai_chat()
    
    # –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π
    if chat_ok:
        await test_openai_models()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Whisper
    await test_whisper_info()
    
    print("\n" + "=" * 60)
    if chat_ok:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüéâ –í–∞—à –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å OpenAI!")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: uvicorn main:app --reload")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –≤ Green API")
    else:
        print("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. OPENAI_API_KEY –≤ —Ñ–∞–π–ª–µ .env")
        print("2. –ë–∞–ª–∞–Ω—Å –Ω–∞ https://platform.openai.com/account/billing")
        print("3. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API –∫–ª—é—á—É")
    print("=" * 60 + "\n")
    
    return 0 if chat_ok else 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)

