#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–æ–≤ WhatsApp AI Bot
"""

import argparse
import json
from chat_memory import chat_memory
import logging

logging.basicConfig(level=logging.INFO)

def list_active_chats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    print("=== –ê–ö–¢–ò–í–ù–´–ï –ß–ê–¢–´ ===")
    
    if chat_memory.redis_client:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —á–∞—Ç–æ–≤ –∏–∑ Redis
        keys = chat_memory.redis_client.keys("chat_history:*")
        if not keys:
            print("–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        for key in keys:
            phone_number = key.replace("chat_history:", "")
            history = chat_memory.get_chat_history(phone_number)
            print(f"üì± {phone_number}: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        # In-memory storage
        if not chat_memory._in_memory_storage:
            print("–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        for phone_number, history in chat_memory._in_memory_storage.items():
            print(f"üì± {phone_number}: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

def show_chat_history(phone_number: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    print(f"=== –ò–°–¢–û–†–ò–Ø –ß–ê–¢–ê: {phone_number} ===")
    
    history = chat_memory.get_chat_history(phone_number)
    if not history:
        print("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞")
        return
    
    for i, msg in enumerate(history, 1):
        role = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg["role"] == "user" else "ü§ñ –ë–æ—Ç"
        timestamp = msg.get("timestamp", "N/A")
        content = msg["content"]
        
        print(f"\n{i}. {role} ({timestamp})")
        print(f"   {content}")

def clear_chat_history(phone_number: str):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    print(f"–û—á–∏—â–∞—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞: {phone_number}")
    chat_memory.clear_chat_history(phone_number)
    print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞")

def clear_all_chats():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —á–∞—Ç—ã"""
    print("–û—á–∏—â–∞—é –≤—Å–µ —á–∞—Ç—ã...")
    
    if chat_memory.redis_client:
        keys = chat_memory.redis_client.keys("chat_history:*")
        for key in keys:
            phone_number = key.replace("chat_history:", "")
            chat_memory.clear_chat_history(phone_number)
    else:
        for phone_number in list(chat_memory._in_memory_storage.keys()):
            chat_memory.clear_chat_history(phone_number)
    
    print("‚úÖ –í—Å–µ —á–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")

def show_chat_summary(phone_number: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞"""
    print(f"=== –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï –ß–ê–¢–ê: {phone_number} ===")
    summary = chat_memory.get_chat_summary(phone_number)
    print(summary)

def main():
    parser = argparse.ArgumentParser(description="–£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–æ–≤ WhatsApp AI Bot")
    parser.add_argument("action", choices=["list", "show", "clear", "clear-all", "summary"], 
                       help="–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    parser.add_argument("--phone", "-p", help="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    args = parser.parse_args()
    
    if args.action == "list":
        list_active_chats()
    
    elif args.action == "show":
        if not args.phone:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: --phone <–Ω–æ–º–µ—Ä>")
            return
        show_chat_history(args.phone)
    
    elif args.action == "clear":
        if not args.phone:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: --phone <–Ω–æ–º–µ—Ä>")
            return
        clear_chat_history(args.phone)
    
    elif args.action == "clear-all":
        confirm = input("‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–ï —á–∞—Ç—ã? (y/N): ")
        if confirm.lower() == 'y':
            clear_all_chats()
        else:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    elif args.action == "summary":
        if not args.phone:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: --phone <–Ω–æ–º–µ—Ä>")
            return
        show_chat_summary(args.phone)

if __name__ == "__main__":
    main() 